"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.observeObject = void 0;
const rxjs_1 = require("rxjs");
const Debug = require("debug");
const debug = Debug('inquirer-table-select:observe');
function observeObject(obj) {
    const changes$ = new rxjs_1.Subject();
    const propertySubscriptions = new Map();
    const observeChildObject = (target, prop, childVal) => {
        const [childProxy, childChanges$] = observeObject(childVal);
        const sub = childChanges$.subscribe((_childObj) => changes$.next(target));
        propertySubscriptions.set(prop, sub);
        return childProxy;
    };
    const stopObservingChildObject = (prop) => {
        propertySubscriptions.get(prop).unsubscribe();
        propertySubscriptions.delete(prop);
    };
    const proxy = new Proxy({}, {
        set: (target, prop, value, receiver) => {
            debug(`set ${String(prop)}: ${value}`);
            if (typeof value === 'object' && !propertySubscriptions.has(prop)) {
                value = observeChildObject(target, prop, value);
            }
            else if (typeof value !== 'object' && propertySubscriptions.has(prop)) {
                stopObservingChildObject(prop);
            }
            const returnVal = Reflect.set(target, prop, value, receiver);
            changes$.next(target);
            return returnVal;
        },
        deleteProperty: (target, prop) => {
            const returnVal = Reflect.deleteProperty(target, prop);
            if (propertySubscriptions.has(prop)) {
                stopObservingChildObject(prop);
            }
            changes$.next(proxy);
            return returnVal;
        },
    });
    for (let key of Object.keys(obj)) {
        proxy[key] = obj[key];
    }
    return [proxy, changes$];
}
exports.observeObject = observeObject;
//# sourceMappingURL=observe.js.map