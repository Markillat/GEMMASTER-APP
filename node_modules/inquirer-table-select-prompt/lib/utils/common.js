"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.generateHelpText = exports.SEPERATOR_CHAR = exports.isShallowEqual = exports.chunk = void 0;
const pc = __importStar(require("picocolors"));
const chunk = (arr, chunkSize = 1, cache = []) => {
    const tmp = [...arr];
    if (chunkSize <= 0)
        return cache;
    while (tmp.length)
        cache.push(tmp.splice(0, chunkSize));
    return cache;
};
exports.chunk = chunk;
const hasOwnProperty = Object.prototype.hasOwnProperty;
function is(x, y) {
    if (x === y) {
        return x !== 0 || y !== 0 || 1 / x === 1 / y;
    }
    else {
        return x !== x && y !== y;
    }
}
function isShallowEqual(objA, objB) {
    if (is(objA, objB)) {
        return true;
    }
    if (typeof objA !== 'object' || objA === null || typeof objB !== 'object' || objB === null) {
        return false;
    }
    const keysA = Object.keys(objA);
    const keysB = Object.keys(objB);
    if (keysA.length !== keysB.length) {
        return false;
    }
    for (let i = 0; i < keysA.length; i++) {
        if (!hasOwnProperty.call(objB, keysA[i]) || !is(objA[keysA[i]], objB[keysA[i]])) {
            return false;
        }
    }
    return true;
}
exports.isShallowEqual = isShallowEqual;
exports.SEPERATOR_CHAR = ' â€¢ ';
function generateHelpText(options) {
    const { isToggledHelp = false, keyMap = [], hideKeyMap = [], width = Infinity } = options;
    const finalKeyMap = [];
    if (hideKeyMap.length)
        finalKeyMap.push(!isToggledHelp ? { key: '?', desc: 'toggle help' } : { key: pc.cyan('?'), desc: pc.cyan('toggle help') });
    finalKeyMap.push(...keyMap);
    if (isToggledHelp) {
        finalKeyMap.push(...hideKeyMap);
    }
    const tempLength = [0];
    const chunks = finalKeyMap
        .map(({ key, desc }) => `${pc.gray(pc.bold(key))} ${pc.dim(desc)}`)
        .reduce((lines, word) => {
        const curr = lines.length - 1;
        const wordLength = replaceAnsi(word).length;
        if (wordLength + tempLength[curr] > width) {
            lines.push([word]);
            tempLength[curr] += wordLength;
        }
        else {
            lines[curr].push(word);
            tempLength[curr] += exports.SEPERATOR_CHAR.length + wordLength;
        }
        return lines;
    }, [[]])
        .map((words) => words.join(exports.SEPERATOR_CHAR));
    return chunks.join('\n');
}
exports.generateHelpText = generateHelpText;
function replaceAnsi(str) {
    const ansiEscapeSequence = /\u001b.*?m/g;
    return str.replace(ansiEscapeSequence, '');
}
//# sourceMappingURL=common.js.map