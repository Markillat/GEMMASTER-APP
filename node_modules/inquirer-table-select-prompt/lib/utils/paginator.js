'use strict';
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Paginator = void 0;
const pc = __importStar(require("picocolors"));
class Paginator {
    constructor(screen, options = {}) {
        this.screen = screen;
        this.lastIndex = 0;
        const { isInfinite = true, isShowHelp = true } = options;
        this.isInfinite = isInfinite;
        this.isShowHelp = isShowHelp;
    }
    paginate(output, active, pageSize) {
        pageSize = pageSize || 7;
        let lines = output.split('\n');
        if (this.screen) {
            lines = this.screen.breakLines(lines);
            active = lines
                .map((lineParts) => lineParts.length)
                .splice(0, active)
                .reduce((a, b) => a + b, 0);
            lines = lines.flat();
        }
        if (lines.length <= pageSize) {
            return output;
        }
        const visibleLines = this.isInfinite
            ? this.getInfiniteLines(lines, active, pageSize)
            : this.getFiniteLines(lines, active, pageSize);
        this.lastIndex = active;
        return visibleLines.join('\n') + (this.isShowHelp ? '\n' + pc.dim('(Move up and down to reveal more choices)') : '');
    }
    getInfiniteLines(lines, active, pageSize) {
        if (this.pointer === undefined) {
            this.pointer = 0;
        }
        const middleOfList = Math.floor(pageSize / 2);
        if (this.pointer < middleOfList && this.lastIndex < active && active - this.lastIndex < pageSize) {
            this.pointer = Math.min(middleOfList, this.pointer + active - this.lastIndex);
        }
        const infinite = [lines, lines, lines].flat();
        const topIndex = Math.max(0, active + lines.length - this.pointer);
        return infinite.splice(topIndex, pageSize);
    }
    getFiniteLines(lines, active, pageSize) {
        let topIndex = active - pageSize / 2;
        if (topIndex < 0) {
            topIndex = 0;
        }
        else if (topIndex + pageSize > lines.length) {
            topIndex = lines.length - pageSize;
        }
        return lines.splice(topIndex, pageSize);
    }
}
exports.Paginator = Paginator;
exports.default = Paginator;
//# sourceMappingURL=paginator.js.map